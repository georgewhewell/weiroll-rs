pub use events::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod events {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"message\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LogAddress\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LogBytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LogBytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LogString\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"message\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LogUint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"message\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"logAddress\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"logBytes\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"logBytes32\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"logString\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"message\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"logUint\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"message\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"logUintPayable\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static EVENTS_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        102,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        85,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        11,
        181,
        99,
        214,
        20,
        97,
        0,
        90,
        87,
        128,
        99,
        45,
        33,
        214,
        247,
        20,
        97,
        0,
        124,
        87,
        128,
        99,
        54,
        13,
        185,
        45,
        20,
        97,
        0,
        156,
        87,
        128,
        99,
        95,
        145,
        176,
        175,
        20,
        97,
        0,
        175,
        87,
        128,
        99,
        153,
        5,
        183,
        68,
        20,
        97,
        0,
        207,
        87,
        128,
        99,
        225,
        123,
        249,
        86,
        20,
        97,
        0,
        234,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        102,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        122,
        97,
        0,
        117,
        54,
        96,
        4,
        97,
        2,
        96,
        86,
        91,
        97,
        1,
        10,
        86,
        91,
        0,
        91,
        52,
        128,
        21,
        97,
        0,
        136,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        122,
        97,
        0,
        151,
        54,
        96,
        4,
        97,
        2,
        162,
        86,
        91,
        97,
        1,
        71,
        86,
        91,
        97,
        0,
        122,
        97,
        0,
        170,
        54,
        96,
        4,
        97,
        2,
        162,
        86,
        91,
        97,
        1,
        125,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        187,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        122,
        97,
        0,
        202,
        54,
        96,
        4,
        97,
        2,
        187,
        86,
        91,
        97,
        1,
        173,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        219,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        122,
        97,
        0,
        170,
        54,
        96,
        4,
        97,
        2,
        162,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        246,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        122,
        97,
        1,
        5,
        54,
        96,
        4,
        97,
        2,
        96,
        86,
        91,
        97,
        1,
        230,
        86,
        91,
        127,
        169,
        94,
        110,
        42,
        24,
        36,
        17,
        231,
        166,
        249,
        237,
        17,
        74,
        133,
        195,
        118,
        29,
        135,
        249,
        184,
        244,
        83,
        216,
        66,
        199,
        18,
        53,
        170,
        100,
        255,
        249,
        159,
        130,
        130,
        96,
        64,
        81,
        97,
        1,
        59,
        146,
        145,
        144,
        97,
        3,
        20,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        129,
        129,
        82,
        126,
        159,
        213,
        47,
        5,
        192,
        222,
        211,
        29,
        111,
        176,
        238,
        88,
        11,
        146,
        63,
        133,
        233,
        156,
        241,
        165,
        161,
        218,
        52,
        47,
        37,
        231,
        60,
        69,
        130,
        156,
        131,
        144,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        86,
        91,
        96,
        64,
        81,
        129,
        129,
        82,
        127,
        10,
        198,
        141,
        8,
        197,
        17,
        155,
        140,
        219,
        64,
        88,
        237,
        191,
        13,
        65,
        104,
        242,
        8,
        236,
        57,
        53,
        210,
        106,
        143,
        31,
        13,
        146,
        235,
        157,
        77,
        232,
        191,
        144,
        96,
        32,
        1,
        97,
        1,
        114,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        129,
        82,
        127,
        177,
        35,
        246,
        139,
        139,
        160,
        43,
        68,
        125,
        145,
        166,
        98,
        158,
        18,
        17,
        17,
        183,
        221,
        96,
        97,
        255,
        65,
        138,
        96,
        19,
        156,
        139,
        240,
        5,
        34,
        162,
        132,
        144,
        96,
        32,
        1,
        97,
        1,
        114,
        86,
        91,
        127,
        83,
        47,
        214,
        234,
        150,
        207,
        183,
        139,
        180,
        110,
        9,
        39,
        154,
        38,
        130,
        139,
        139,
        73,
        61,
        225,
        162,
        184,
        177,
        238,
        31,
        172,
        229,
        39,
        151,
        138,
        21,
        165,
        130,
        130,
        96,
        64,
        81,
        97,
        1,
        59,
        146,
        145,
        144,
        97,
        3,
        20,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        2,
        41,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        2,
        65,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        2,
        89,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        2,
        115,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        2,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        150,
        133,
        130,
        134,
        1,
        97,
        2,
        23,
        86,
        91,
        144,
        150,
        144,
        149,
        80,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        180,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        205,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        2,
        228,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        129,
        131,
        82,
        129,
        129,
        96,
        32,
        133,
        1,
        55,
        80,
        96,
        0,
        130,
        130,
        1,
        96,
        32,
        144,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        31,
        144,
        145,
        1,
        96,
        31,
        25,
        22,
        144,
        145,
        1,
        1,
        144,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        3,
        40,
        96,
        32,
        131,
        1,
        132,
        134,
        97,
        2,
        235,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        201,
        80,
        100,
        98,
        26,
        96,
        240,
        169,
        189,
        157,
        197,
        214,
        106,
        61,
        251,
        224,
        37,
        78,
        66,
        248,
        24,
        71,
        137,
        16,
        103,
        88,
        235,
        162,
        116,
        7,
        145,
        219,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static EVENTS_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        85,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        11,
        181,
        99,
        214,
        20,
        97,
        0,
        90,
        87,
        128,
        99,
        45,
        33,
        214,
        247,
        20,
        97,
        0,
        124,
        87,
        128,
        99,
        54,
        13,
        185,
        45,
        20,
        97,
        0,
        156,
        87,
        128,
        99,
        95,
        145,
        176,
        175,
        20,
        97,
        0,
        175,
        87,
        128,
        99,
        153,
        5,
        183,
        68,
        20,
        97,
        0,
        207,
        87,
        128,
        99,
        225,
        123,
        249,
        86,
        20,
        97,
        0,
        234,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        102,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        122,
        97,
        0,
        117,
        54,
        96,
        4,
        97,
        2,
        96,
        86,
        91,
        97,
        1,
        10,
        86,
        91,
        0,
        91,
        52,
        128,
        21,
        97,
        0,
        136,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        122,
        97,
        0,
        151,
        54,
        96,
        4,
        97,
        2,
        162,
        86,
        91,
        97,
        1,
        71,
        86,
        91,
        97,
        0,
        122,
        97,
        0,
        170,
        54,
        96,
        4,
        97,
        2,
        162,
        86,
        91,
        97,
        1,
        125,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        187,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        122,
        97,
        0,
        202,
        54,
        96,
        4,
        97,
        2,
        187,
        86,
        91,
        97,
        1,
        173,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        219,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        122,
        97,
        0,
        170,
        54,
        96,
        4,
        97,
        2,
        162,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        246,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        122,
        97,
        1,
        5,
        54,
        96,
        4,
        97,
        2,
        96,
        86,
        91,
        97,
        1,
        230,
        86,
        91,
        127,
        169,
        94,
        110,
        42,
        24,
        36,
        17,
        231,
        166,
        249,
        237,
        17,
        74,
        133,
        195,
        118,
        29,
        135,
        249,
        184,
        244,
        83,
        216,
        66,
        199,
        18,
        53,
        170,
        100,
        255,
        249,
        159,
        130,
        130,
        96,
        64,
        81,
        97,
        1,
        59,
        146,
        145,
        144,
        97,
        3,
        20,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        129,
        129,
        82,
        126,
        159,
        213,
        47,
        5,
        192,
        222,
        211,
        29,
        111,
        176,
        238,
        88,
        11,
        146,
        63,
        133,
        233,
        156,
        241,
        165,
        161,
        218,
        52,
        47,
        37,
        231,
        60,
        69,
        130,
        156,
        131,
        144,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        86,
        91,
        96,
        64,
        81,
        129,
        129,
        82,
        127,
        10,
        198,
        141,
        8,
        197,
        17,
        155,
        140,
        219,
        64,
        88,
        237,
        191,
        13,
        65,
        104,
        242,
        8,
        236,
        57,
        53,
        210,
        106,
        143,
        31,
        13,
        146,
        235,
        157,
        77,
        232,
        191,
        144,
        96,
        32,
        1,
        97,
        1,
        114,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        129,
        82,
        127,
        177,
        35,
        246,
        139,
        139,
        160,
        43,
        68,
        125,
        145,
        166,
        98,
        158,
        18,
        17,
        17,
        183,
        221,
        96,
        97,
        255,
        65,
        138,
        96,
        19,
        156,
        139,
        240,
        5,
        34,
        162,
        132,
        144,
        96,
        32,
        1,
        97,
        1,
        114,
        86,
        91,
        127,
        83,
        47,
        214,
        234,
        150,
        207,
        183,
        139,
        180,
        110,
        9,
        39,
        154,
        38,
        130,
        139,
        139,
        73,
        61,
        225,
        162,
        184,
        177,
        238,
        31,
        172,
        229,
        39,
        151,
        138,
        21,
        165,
        130,
        130,
        96,
        64,
        81,
        97,
        1,
        59,
        146,
        145,
        144,
        97,
        3,
        20,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        2,
        41,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        2,
        65,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        2,
        89,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        2,
        115,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        2,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        150,
        133,
        130,
        134,
        1,
        97,
        2,
        23,
        86,
        91,
        144,
        150,
        144,
        149,
        80,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        180,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        205,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        2,
        228,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        129,
        131,
        82,
        129,
        129,
        96,
        32,
        133,
        1,
        55,
        80,
        96,
        0,
        130,
        130,
        1,
        96,
        32,
        144,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        31,
        144,
        145,
        1,
        96,
        31,
        25,
        22,
        144,
        145,
        1,
        1,
        144,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        3,
        40,
        96,
        32,
        131,
        1,
        132,
        134,
        97,
        2,
        235,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        201,
        80,
        100,
        98,
        26,
        96,
        240,
        169,
        189,
        157,
        197,
        214,
        106,
        61,
        251,
        224,
        37,
        78,
        66,
        248,
        24,
        71,
        137,
        16,
        103,
        88,
        235,
        162,
        116,
        7,
        145,
        219,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static EVENTS_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct Events<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Events<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for Events<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for Events<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for Events<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(Events))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Events<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                EVENTS_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                EVENTS_ABI.clone(),
                EVENTS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `logAddress` (0x5f91b0af) function
        pub fn log_address(
            &self,
            message: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([95, 145, 176, 175], message)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `logBytes` (0xe17bf956) function
        pub fn log_bytes(
            &self,
            message: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([225, 123, 249, 86], message)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `logBytes32` (0x2d21d6f7) function
        pub fn log_bytes_32(
            &self,
            message: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 33, 214, 247], message)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `logString` (0x0bb563d6) function
        pub fn log_string(
            &self,
            message: ::std::string::String,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([11, 181, 99, 214], message)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `logUint` (0x9905b744) function
        pub fn log_uint(
            &self,
            message: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([153, 5, 183, 68], message)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `logUintPayable` (0x360db92d) function
        pub fn log_uint_payable(
            &self,
            message: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([54, 13, 185, 45], message)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `LogAddress` event
        pub fn log_address_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, LogAddressFilter> {
            self.0.event()
        }
        ///Gets the contract's `LogBytes` event
        pub fn log_bytes_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, LogBytesFilter> {
            self.0.event()
        }
        ///Gets the contract's `LogBytes32` event
        pub fn log_bytes_32_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, LogBytes32Filter> {
            self.0.event()
        }
        ///Gets the contract's `LogString` event
        pub fn log_string_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, LogStringFilter> {
            self.0.event()
        }
        ///Gets the contract's `LogUint` event
        pub fn log_uint_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, LogUintFilter> {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, EventsEvents> {
            self.0
                .event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>> for Events<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "LogAddress", abi = "LogAddress(address)")]
    pub struct LogAddressFilter {
        pub message: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "LogBytes", abi = "LogBytes(bytes)")]
    pub struct LogBytesFilter {
        pub message: ::ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "LogBytes32", abi = "LogBytes32(bytes32)")]
    pub struct LogBytes32Filter {
        pub message: [u8; 32],
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "LogString", abi = "LogString(string)")]
    pub struct LogStringFilter {
        pub message: ::std::string::String,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "LogUint", abi = "LogUint(uint256)")]
    pub struct LogUintFilter {
        pub message: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum EventsEvents {
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
    }
    impl ::ethers::contract::EthLogDecode for EventsEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(EventsEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(EventsEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(EventsEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(EventsEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(EventsEvents::LogUintFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for EventsEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::LogAddressFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogBytesFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogBytes32Filter(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogStringFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogUintFilter(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<LogAddressFilter> for EventsEvents {
        fn from(value: LogAddressFilter) -> Self {
            Self::LogAddressFilter(value)
        }
    }
    impl ::core::convert::From<LogBytesFilter> for EventsEvents {
        fn from(value: LogBytesFilter) -> Self {
            Self::LogBytesFilter(value)
        }
    }
    impl ::core::convert::From<LogBytes32Filter> for EventsEvents {
        fn from(value: LogBytes32Filter) -> Self {
            Self::LogBytes32Filter(value)
        }
    }
    impl ::core::convert::From<LogStringFilter> for EventsEvents {
        fn from(value: LogStringFilter) -> Self {
            Self::LogStringFilter(value)
        }
    }
    impl ::core::convert::From<LogUintFilter> for EventsEvents {
        fn from(value: LogUintFilter) -> Self {
            Self::LogUintFilter(value)
        }
    }
    ///Container type for all input parameters for the `logAddress` function with signature `logAddress(address)` and selector `0x5f91b0af`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "logAddress", abi = "logAddress(address)")]
    pub struct LogAddressCall {
        pub message: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `logBytes` function with signature `logBytes(bytes)` and selector `0xe17bf956`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "logBytes", abi = "logBytes(bytes)")]
    pub struct LogBytesCall {
        pub message: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `logBytes32` function with signature `logBytes32(bytes32)` and selector `0x2d21d6f7`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "logBytes32", abi = "logBytes32(bytes32)")]
    pub struct LogBytes32Call {
        pub message: [u8; 32],
    }
    ///Container type for all input parameters for the `logString` function with signature `logString(string)` and selector `0x0bb563d6`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "logString", abi = "logString(string)")]
    pub struct LogStringCall {
        pub message: ::std::string::String,
    }
    ///Container type for all input parameters for the `logUint` function with signature `logUint(uint256)` and selector `0x9905b744`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "logUint", abi = "logUint(uint256)")]
    pub struct LogUintCall {
        pub message: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `logUintPayable` function with signature `logUintPayable(uint256)` and selector `0x360db92d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "logUintPayable", abi = "logUintPayable(uint256)")]
    pub struct LogUintPayableCall {
        pub message: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum EventsCalls {
        LogAddress(LogAddressCall),
        LogBytes(LogBytesCall),
        LogBytes32(LogBytes32Call),
        LogString(LogStringCall),
        LogUint(LogUintCall),
        LogUintPayable(LogUintPayableCall),
    }
    impl ::ethers::core::abi::AbiDecode for EventsCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <LogAddressCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::LogAddress(decoded));
            }
            if let Ok(decoded) = <LogBytesCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::LogBytes(decoded));
            }
            if let Ok(decoded) = <LogBytes32Call as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::LogBytes32(decoded));
            }
            if let Ok(decoded) = <LogStringCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::LogString(decoded));
            }
            if let Ok(decoded) = <LogUintCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::LogUint(decoded));
            }
            if let Ok(decoded) =
                <LogUintPayableCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::LogUintPayable(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for EventsCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::LogAddress(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::LogBytes(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::LogBytes32(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::LogString(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::LogUint(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::LogUintPayable(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for EventsCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::LogAddress(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogBytes(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogBytes32(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogString(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogUint(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogUintPayable(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<LogAddressCall> for EventsCalls {
        fn from(value: LogAddressCall) -> Self {
            Self::LogAddress(value)
        }
    }
    impl ::core::convert::From<LogBytesCall> for EventsCalls {
        fn from(value: LogBytesCall) -> Self {
            Self::LogBytes(value)
        }
    }
    impl ::core::convert::From<LogBytes32Call> for EventsCalls {
        fn from(value: LogBytes32Call) -> Self {
            Self::LogBytes32(value)
        }
    }
    impl ::core::convert::From<LogStringCall> for EventsCalls {
        fn from(value: LogStringCall) -> Self {
            Self::LogString(value)
        }
    }
    impl ::core::convert::From<LogUintCall> for EventsCalls {
        fn from(value: LogUintCall) -> Self {
            Self::LogUint(value)
        }
    }
    impl ::core::convert::From<LogUintPayableCall> for EventsCalls {
        fn from(value: LogUintPayableCall) -> Self {
            Self::LogUintPayable(value)
        }
    }
}
