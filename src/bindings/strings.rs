pub use strings::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod strings {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"string\",\"name\":\"b\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"strcat\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"strlen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static STRINGS_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        80,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        54,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        54,
        123,
        189,
        120,
        20,
        97,
        0,
        59,
        87,
        128,
        99,
        216,
        36,
        204,
        243,
        20,
        97,
        0,
        97,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        78,
        97,
        0,
        73,
        54,
        96,
        4,
        97,
        0,
        252,
        86,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        116,
        97,
        0,
        111,
        54,
        96,
        4,
        97,
        1,
        62,
        86,
        91,
        97,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        88,
        145,
        144,
        97,
        1,
        170,
        86,
        91,
        96,
        96,
        132,
        132,
        132,
        132,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        0,
        154,
        148,
        147,
        146,
        145,
        144,
        97,
        1,
        248,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        144,
        80,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        0,
        197,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        0,
        221,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        0,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        1,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        1,
        38,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        1,
        50,
        133,
        130,
        134,
        1,
        97,
        0,
        179,
        86,
        91,
        144,
        150,
        144,
        149,
        80,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        1,
        84,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        1,
        108,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        1,
        120,
        136,
        131,
        137,
        1,
        97,
        0,
        179,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        1,
        145,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        158,
        135,
        130,
        136,
        1,
        97,
        0,
        179,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        82,
        131,
        81,
        128,
        130,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        1,
        215,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        64,
        1,
        82,
        130,
        1,
        97,
        1,
        187,
        86,
        91,
        80,
        96,
        0,
        96,
        64,
        130,
        134,
        1,
        1,
        82,
        96,
        64,
        96,
        31,
        25,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        146,
        80,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        131,
        133,
        130,
        55,
        96,
        0,
        132,
        130,
        1,
        96,
        0,
        129,
        82,
        131,
        133,
        130,
        55,
        96,
        0,
        147,
        1,
        146,
        131,
        82,
        80,
        144,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        2,
        81,
        29,
        151,
        242,
        204,
        149,
        156,
        125,
        106,
        76,
        45,
        179,
        245,
        114,
        102,
        6,
        26,
        88,
        117,
        194,
        232,
        195,
        83,
        207,
        123,
        220,
        156,
        57,
        223,
        193,
        118,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static STRINGS_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        54,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        54,
        123,
        189,
        120,
        20,
        97,
        0,
        59,
        87,
        128,
        99,
        216,
        36,
        204,
        243,
        20,
        97,
        0,
        97,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        78,
        97,
        0,
        73,
        54,
        96,
        4,
        97,
        0,
        252,
        86,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        116,
        97,
        0,
        111,
        54,
        96,
        4,
        97,
        1,
        62,
        86,
        91,
        97,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        88,
        145,
        144,
        97,
        1,
        170,
        86,
        91,
        96,
        96,
        132,
        132,
        132,
        132,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        0,
        154,
        148,
        147,
        146,
        145,
        144,
        97,
        1,
        248,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        144,
        80,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        0,
        197,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        0,
        221,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        0,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        1,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        1,
        38,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        1,
        50,
        133,
        130,
        134,
        1,
        97,
        0,
        179,
        86,
        91,
        144,
        150,
        144,
        149,
        80,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        1,
        84,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        1,
        108,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        1,
        120,
        136,
        131,
        137,
        1,
        97,
        0,
        179,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        1,
        145,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        158,
        135,
        130,
        136,
        1,
        97,
        0,
        179,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        82,
        131,
        81,
        128,
        130,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        1,
        215,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        64,
        1,
        82,
        130,
        1,
        97,
        1,
        187,
        86,
        91,
        80,
        96,
        0,
        96,
        64,
        130,
        134,
        1,
        1,
        82,
        96,
        64,
        96,
        31,
        25,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        146,
        80,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        131,
        133,
        130,
        55,
        96,
        0,
        132,
        130,
        1,
        96,
        0,
        129,
        82,
        131,
        133,
        130,
        55,
        96,
        0,
        147,
        1,
        146,
        131,
        82,
        80,
        144,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        2,
        81,
        29,
        151,
        242,
        204,
        149,
        156,
        125,
        106,
        76,
        45,
        179,
        245,
        114,
        102,
        6,
        26,
        88,
        117,
        194,
        232,
        195,
        83,
        207,
        123,
        220,
        156,
        57,
        223,
        193,
        118,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static STRINGS_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct Strings<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Strings<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for Strings<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for Strings<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for Strings<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(Strings))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Strings<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                STRINGS_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                STRINGS_ABI.clone(),
                STRINGS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `strcat` (0xd824ccf3) function
        pub fn strcat(
            &self,
            a: ::std::string::String,
            b: ::std::string::String,
        ) -> ::ethers::contract::builders::ContractCall<M, ::std::string::String> {
            self.0
                .method_hash([216, 36, 204, 243], (a, b))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `strlen` (0x367bbd78) function
        pub fn strlen(
            &self,
            x: ::std::string::String,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([54, 123, 189, 120], x)
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>> for Strings<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `strcat` function with signature `strcat(string,string)` and selector `0xd824ccf3`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "strcat", abi = "strcat(string,string)")]
    pub struct StrcatCall {
        pub a: ::std::string::String,
        pub b: ::std::string::String,
    }
    ///Container type for all input parameters for the `strlen` function with signature `strlen(string)` and selector `0x367bbd78`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "strlen", abi = "strlen(string)")]
    pub struct StrlenCall {
        pub x: ::std::string::String,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum StringsCalls {
        Strcat(StrcatCall),
        Strlen(StrlenCall),
    }
    impl ::ethers::core::abi::AbiDecode for StringsCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <StrcatCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Strcat(decoded));
            }
            if let Ok(decoded) = <StrlenCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Strlen(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for StringsCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Strcat(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Strlen(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for StringsCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Strcat(element) => ::core::fmt::Display::fmt(element, f),
                Self::Strlen(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<StrcatCall> for StringsCalls {
        fn from(value: StrcatCall) -> Self {
            Self::Strcat(value)
        }
    }
    impl ::core::convert::From<StrlenCall> for StringsCalls {
        fn from(value: StrlenCall) -> Self {
            Self::Strlen(value)
        }
    }
    ///Container type for all return fields from the `strcat` function with signature `strcat(string,string)` and selector `0xd824ccf3`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct StrcatReturn(pub ::std::string::String);
    ///Container type for all return fields from the `strlen` function with signature `strlen(string)` and selector `0x367bbd78`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct StrlenReturn(pub ::ethers::core::types::U256);
}
